/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Playlists = {
  _id: string;
  _type: "playlists";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  playlist_name: string;
  playlist_cover_image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  pinned?: boolean;
  description?: string;
  type?: string;
  slug: Slug;
  playlist: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "projects";
  }>;
};

export type Profile = {
  _id: string;
  _type: "profile";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  github_link: string;
  linkedin_link: string;
  email_address: string;
  project_versions: Array<{
    version_number: string;
    version_url: string;
    _key: string;
  }>;
};

export type Projects = {
  _id: string;
  _type: "projects";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  sub_title: string;
  description: string;
  project_images: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  project_type: "projects" | "blogs" | "work_experience";
  tools_used?: Array<string>;
  secondary_color: string;
  primary_color: string;
  achievements?: Array<string>;
  github_url_link?: string;
  live_url_link?: string;
  slug: Slug;
  date_created: string;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Playlists | Profile | Projects | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../src/sanity/lib/queries.ts
// Variable: PROJECTS_BY_CATEGORY_QUERY
// Query: {  "projects": *[project_type == "projects"] | order(date_created desc) {  title,  "first_image_url": project_images[0].asset->url,  "slug": slug.current,  sub_title,  project_type},  "blogs": *[project_type == "blogs"] | order(date_created desc) {  title,  "first_image_url": project_images[0].asset->url,  "slug": slug.current,  sub_title,  project_type},  "work_experience": *[project_type == "work_experience"] | order(date_created desc) {  title,  "first_image_url": project_images[0].asset->url,  "slug": slug.current,  sub_title,  project_type}}
export type PROJECTS_BY_CATEGORY_QUERYResult = {
  projects: Array<{
    title: string;
    first_image_url: string | null;
    slug: string;
    sub_title: string;
    project_type: "blogs" | "projects" | "work_experience";
  }>;
  blogs: Array<{
    title: string;
    first_image_url: string | null;
    slug: string;
    sub_title: string;
    project_type: "blogs" | "projects" | "work_experience";
  }>;
  work_experience: Array<{
    title: string;
    first_image_url: string | null;
    slug: string;
    sub_title: string;
    project_type: "blogs" | "projects" | "work_experience";
  }>;
};
// Variable: SINGLE_PROJECT_QUERY
// Query: *[slug.current == $slug][0]{      title,      "project_images": project_images[].asset->url,      "slug": slug.current,      sub_title,      project_type,        date_created,        description,        primary_color,        secondary_color,        tools_used,        achievements,        github_url_link,        live_url_link    }
export type SINGLE_PROJECT_QUERYResult = {
  title: null;
  project_images: null;
  slug: null;
  sub_title: null;
  project_type: null;
  date_created: null;
  description: null;
  primary_color: null;
  secondary_color: null;
  tools_used: null;
  achievements: null;
  github_url_link: null;
  live_url_link: null;
} | {
  title: string | null;
  project_images: null;
  slug: null;
  sub_title: null;
  project_type: null;
  date_created: null;
  description: string | null;
  primary_color: null;
  secondary_color: null;
  tools_used: null;
  achievements: null;
  github_url_link: null;
  live_url_link: null;
} | {
  title: null;
  project_images: null;
  slug: string;
  sub_title: null;
  project_type: null;
  date_created: null;
  description: string | null;
  primary_color: null;
  secondary_color: null;
  tools_used: null;
  achievements: null;
  github_url_link: null;
  live_url_link: null;
} | {
  title: string;
  project_images: Array<string | null>;
  slug: string;
  sub_title: string;
  project_type: "blogs" | "projects" | "work_experience";
  date_created: string;
  description: string;
  primary_color: string;
  secondary_color: string;
  tools_used: Array<string> | null;
  achievements: Array<string> | null;
  github_url_link: string | null;
  live_url_link: string | null;
} | null;
// Variable: MY_PROFILE_QUERY
// Query: *[_type == "profile"][0]{    email_address,    github_link,    linkedin_link,    project_versions[]{      version_number,      version_url    }  }
export type MY_PROFILE_QUERYResult = {
  email_address: string;
  github_link: string;
  linkedin_link: string;
  project_versions: Array<{
    version_number: string;
    version_url: string;
  }>;
} | null;
// Variable: SINGLE_PLAYLIST_QUERY
// Query: *[_type == "playlists" && slug.current == $slug][0]{    playlist_name,    "slug":slug.current,    "playlist_cover_image":playlist_cover_image.asset->url,    description,    pinned,    type,    playlist[]->{  title,  "first_image_url": project_images[0].asset->url,  "slug": slug.current,  sub_title,  project_type}  }
export type SINGLE_PLAYLIST_QUERYResult = {
  playlist_name: string;
  slug: string;
  playlist_cover_image: string | null;
  description: string | null;
  pinned: boolean | null;
  type: string | null;
  playlist: Array<{
    title: string;
    first_image_url: string | null;
    slug: string;
    sub_title: string;
    project_type: "blogs" | "projects" | "work_experience";
  }>;
} | null;
// Variable: PLAYLIST_SUMMARY_LIST_QUERY
// Query: *[_type == "playlists"] | order(pinned desc){    playlist_name,    "slug": slug.current,    "playlist_cover_image": playlist_cover_image.asset->url,    description,    pinned,    type,    "playlist_length": count(playlist)  }
export type PLAYLIST_SUMMARY_LIST_QUERYResult = Array<{
  playlist_name: string;
  slug: string;
  playlist_cover_image: string | null;
  description: string | null;
  pinned: boolean | null;
  type: string | null;
  playlist_length: number;
}>;
// Variable: PROJECTS_BY_SLUGS_QUERY
// Query: *[    slug.current in $slugs  ]{    title,    "first_image_url": project_images[0].asset->url,    "slug": slug.current,    sub_title,    project_type  }
export type PROJECTS_BY_SLUGS_QUERYResult = Array<{
  title: null;
  first_image_url: null;
  slug: null;
  sub_title: null;
  project_type: null;
} | {
  title: string | null;
  first_image_url: null;
  slug: null;
  sub_title: null;
  project_type: null;
} | {
  title: null;
  first_image_url: null;
  slug: string;
  sub_title: null;
  project_type: null;
} | {
  title: string;
  first_image_url: string | null;
  slug: string;
  sub_title: string;
  project_type: "blogs" | "projects" | "work_experience";
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "{\n  \"projects\": *[project_type == \"projects\"] | order(date_created desc) {\n  title,\n  \"first_image_url\": project_images[0].asset->url,\n  \"slug\": slug.current,\n  sub_title,\n  project_type\n},\n  \"blogs\": *[project_type == \"blogs\"] | order(date_created desc) {\n  title,\n  \"first_image_url\": project_images[0].asset->url,\n  \"slug\": slug.current,\n  sub_title,\n  project_type\n},\n  \"work_experience\": *[project_type == \"work_experience\"] | order(date_created desc) {\n  title,\n  \"first_image_url\": project_images[0].asset->url,\n  \"slug\": slug.current,\n  sub_title,\n  project_type\n}\n}": PROJECTS_BY_CATEGORY_QUERYResult;
    "\n   *[slug.current == $slug][0]{\n      title,\n      \"project_images\": project_images[].asset->url,\n      \"slug\": slug.current,\n      sub_title,\n      project_type,\n        date_created,\n        description,\n        primary_color,\n        secondary_color,\n        tools_used,\n        achievements,\n        github_url_link,\n        live_url_link\n    }\n  ": SINGLE_PROJECT_QUERYResult;
    "\n  *[_type == \"profile\"][0]{\n    email_address,\n    github_link,\n    linkedin_link,\n    project_versions[]{\n      version_number,\n      version_url\n    }\n  }\n": MY_PROFILE_QUERYResult;
    "\n  *[_type == \"playlists\" && slug.current == $slug][0]{\n    playlist_name,\n    \"slug\":slug.current,\n    \"playlist_cover_image\":playlist_cover_image.asset->url,\n    description,\n    pinned,\n    type,\n    playlist[]->{\n  title,\n  \"first_image_url\": project_images[0].asset->url,\n  \"slug\": slug.current,\n  sub_title,\n  project_type\n}\n  }\n  ": SINGLE_PLAYLIST_QUERYResult;
    "\n  *[_type == \"playlists\"] | order(pinned desc){\n    playlist_name,\n    \"slug\": slug.current,\n    \"playlist_cover_image\": playlist_cover_image.asset->url,\n    description,\n    pinned,\n    type,\n    \"playlist_length\": count(playlist)\n  }\n  ": PLAYLIST_SUMMARY_LIST_QUERYResult;
    "\n  *[\n    slug.current in $slugs\n  ]{\n    title,\n    \"first_image_url\": project_images[0].asset->url,\n    \"slug\": slug.current,\n    sub_title,\n    project_type\n  }": PROJECTS_BY_SLUGS_QUERYResult;
  }
}
