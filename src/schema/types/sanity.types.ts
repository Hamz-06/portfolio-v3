/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Profile = {
  _id: string;
  _type: "profile";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  github_link: string;
  linkedin_link: string;
  email_address: string;
  project_versions: Array<{
    version_number: string;
    version_url: string;
    _key: string;
  }>;
};

export type Projects = {
  _id: string;
  _type: "projects";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  sub_title: string;
  description: string;
  project_images: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  project_type: "projects" | "blogs" | "work_experience";
  tools_used?: Array<string>;
  secondary_color?: string;
  primary_color: string;
  achievements?: Array<string>;
  github_url_link?: string;
  live_url_link?: string;
  slug: Slug;
  date_created: string;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Profile | Projects | Slug | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: CATEGORIZED_PROJECTS_HOME_PAGE
// Query: {    "projects": *[project_type == "projects"]|order(date_created desc){      title,      "first_image_url": project_images[0].asset->url,      "slug": slug.current,      sub_title,      project_type    },    "blogs": *[project_type == "blogs"] | order(date_created desc){      title,      "first_image_url": project_images[0].asset->url,      "slug": slug.current,      sub_title,      project_type    },    "work_experience": *[project_type == "work_experience"] | order(date_created desc){      title,      "first_image_url": project_images[0].asset->url,      "slug": slug.current,      sub_title,      project_type    }  }
export type CATEGORIZED_PROJECTS_HOME_PAGEResult = {
  projects: Array<{
    title: string;
    first_image_url: string | null;
    slug: string;
    sub_title: string;
    project_type: "blogs" | "projects" | "work_experience";
  }>;
  blogs: Array<{
    title: string;
    first_image_url: string | null;
    slug: string;
    sub_title: string;
    project_type: "blogs" | "projects" | "work_experience";
  }>;
  work_experience: Array<{
    title: string;
    first_image_url: string | null;
    slug: string;
    sub_title: string;
    project_type: "blogs" | "projects" | "work_experience";
  }>;
};
// Variable: PROJECT_PROJECT_PAGE
// Query: *[slug.current == "REPLACE_SLUG"][0]{      title,      "project_images": project_images[].asset->url,      "slug": slug.current,      sub_title,      project_type,        date_created,        description,        primary_color,        secondary_color,        tools_used,        achievements,        github_url_link,        live_url_link            }
export type PROJECT_PROJECT_PAGEResult = {
  title: string;
  project_images: Array<string | null>;
  slug: string;
  sub_title: string;
  project_type: "blogs" | "projects" | "work_experience";
  date_created: string;
  description: string;
  primary_color: string;
  secondary_color: string | null;
  tools_used: Array<string> | null;
  achievements: Array<string> | null;
  github_url_link: string | null;
  live_url_link: string | null;
} | null;
// Variable: MY_PROFILE
// Query: *[_type == "profile"][0]{    email_address,    github_link,    linkedin_link,    project_versions[]{      version_number,      version_url    }  }
export type MY_PROFILEResult = {
  email_address: string;
  github_link: string;
  linkedin_link: string;
  project_versions: Array<{
    version_number: string;
    version_url: string;
  }>;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "{\n    \"projects\": *[project_type == \"projects\"]|order(date_created desc){\n      title,\n      \"first_image_url\": project_images[0].asset->url,\n      \"slug\": slug.current,\n      sub_title,\n      project_type\n    },\n    \"blogs\": *[project_type == \"blogs\"] | order(date_created desc){\n      title,\n      \"first_image_url\": project_images[0].asset->url,\n      \"slug\": slug.current,\n      sub_title,\n      project_type\n    },\n    \"work_experience\": *[project_type == \"work_experience\"] | order(date_created desc){\n      title,\n      \"first_image_url\": project_images[0].asset->url,\n      \"slug\": slug.current,\n      sub_title,\n      project_type\n    }\n  }\n": CATEGORIZED_PROJECTS_HOME_PAGEResult;
    "\n   *[slug.current == \"REPLACE_SLUG\"][0]{\n      title,\n      \"project_images\": project_images[].asset->url,\n      \"slug\": slug.current,\n      sub_title,\n      project_type,\n        date_created,\n        description,\n        primary_color,\n        secondary_color,\n        tools_used,\n        achievements,\n        github_url_link,\n        live_url_link\n        \n    }\n  ": PROJECT_PROJECT_PAGEResult;
    "\n  *[_type == \"profile\"][0]{\n    email_address,\n    github_link,\n    linkedin_link,\n    project_versions[]{\n      version_number,\n      version_url\n    }\n  }\n": MY_PROFILEResult;
  }
}
